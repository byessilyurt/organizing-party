/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package yusuf_yesilyurt.organizing_party.api;

import yusuf_yesilyurt.organizing_party.model.Event;
import yusuf_yesilyurt.organizing_party.model.EventsGetRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-16T18:13:16.422362+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "EventPlanning", description = "the EventPlanning API")
public interface EventPlanningApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /events/{eventId} : Deletes an event by ID
     *
     * @param eventId Event ID (required)
     * @return Event deleted successfully (status code 200)
     *         or Event not found (status code 404)
     */
    @Operation(operationId = "eventsEventIdDelete", summary = "Deletes an event by ID", tags = {
            "Event Planning" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Event deleted successfully"),
                    @ApiResponse(responseCode = "404", description = "Event not found")
            })
    @RequestMapping(method = RequestMethod.DELETE, value = "/events/{eventId}")
    default ResponseEntity<Void> _eventsEventIdDelete(
            @Parameter(name = "eventId", description = "Event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId) {
        return eventsEventIdDelete(eventId);
    }

    default ResponseEntity<Void> eventsEventIdDelete(Integer eventId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /events/{eventId} : Retrieves an event by ID
     *
     * @param eventId Event ID (required)
     * @return Event retrieved successfully (status code 200)
     *         or Event not found (status code 404)
     */
    @Operation(operationId = "eventsEventIdGet", summary = "Retrieves an event by ID", tags = {
            "Event Planning" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Event retrieved successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Event not found")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/events/{eventId}", produces = { "application/json" })
    default ResponseEntity<Event> _eventsEventIdGet(
            @Parameter(name = "eventId", description = "Event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId) {
        return eventsEventIdGet(eventId);
    }

    default ResponseEntity<Event> eventsEventIdGet(Integer eventId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"id\" : 6, \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 1, \"eventDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /events/{eventId} : Updates an event by ID
     *
     * @param eventId Event ID (required)
     * @param event   (optional)
     * @return Event updated successfully (status code 200)
     *         or Event not found (status code 404)
     */
    @Operation(operationId = "eventsEventIdPut", summary = "Updates an event by ID", tags = {
            "Event Planning" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Event updated successfully"),
                    @ApiResponse(responseCode = "404", description = "Event not found")
            })
    @RequestMapping(method = RequestMethod.PUT, value = "/events/{eventId}", consumes = { "application/json" })
    default ResponseEntity<Void> _eventsEventIdPut(
            @Parameter(name = "eventId", description = "Event ID", required = true, in = ParameterIn.PATH) @PathVariable("eventId") Integer eventId,
            @Parameter(name = "Event", description = "") @Valid @RequestBody(required = false) Event event) {
        return eventsEventIdPut(eventId, event);
    }

    // Override this method
    default ResponseEntity<Void> eventsEventIdPut(Integer eventId, Event event) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /events : Retrieves a list of events with pagination
     *
     * @param page  Page number (optional, default to 1)
     * @param limit Number of items per page (optional, default to 10)
     * @return Event list retrieved successfully (status code 200)
     *         or No events found (status code 404)
     */
    @Operation(operationId = "eventsGet", summary = "Retrieves a list of events with pagination", tags = {
            "Event Planning" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Event list retrieved successfully", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Event.class)))
                    }),
                    @ApiResponse(responseCode = "404", description = "No events found")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/events", produces = { "application/json" })
    default ResponseEntity<List<Event>> _eventsGet(
            @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
            @Parameter(name = "limit", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit) {
        return eventsGet(page, limit);
    }

    default ResponseEntity<List<Event>> eventsGet(Integer page, Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imageUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"id\" : 6, \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 1, \"eventDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"imageUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"id\" : 6, \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : 1, \"eventDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /events : Creates a new event
     *
     * @param eventsGetRequest (optional)
     * @return Event created successfully (status code 201)
     *         or Invalid request (status code 400)
     */
    @Operation(operationId = "eventsPost", summary = "Creates a new event", tags = { "Event Planning" }, responses = {
            @ApiResponse(responseCode = "201", description = "Event created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
    })
    @RequestMapping(method = RequestMethod.POST, value = "/events", consumes = { "application/json" })
    default ResponseEntity<Void> _eventsPost(
            @Parameter(name = "EventsGetRequest", description = "") @Valid @RequestBody(required = false) EventsGetRequest eventsGetRequest) {
        return eventsPost(eventsGetRequest);
    }

    default ResponseEntity<Void> eventsPost(EventsGetRequest eventsGetRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
